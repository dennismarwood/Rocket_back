openapi: '3.0.1'
# Cors issue in vs code - https://dzhavat.github.io/2020/11/12/easy-way-to-debug-a-webview-in-a-vscode-extension.html
# https://github.com/42Crunch/vscode-openapi/issues/129
info:
  title: DennisMarwood.com
  description: CRUD blog entries for homepage.
  contact:
      name: Dennis Marwood,
      url: https://dennismarwood.com/contact,
      email: dennismarwood@gmail.com
  version: '1.0'
  #license:
    #name: 
    #url:
servers: #Check on passing in a variable here
  - url: http://localhost:8001/api
    description: Dev Back
  - url: http://127.0.0.1:8001/api
    description: Dev Back
paths:
  /users:
    get:
      summary: Return a list of users.
      description: The API allows users to filter the list of users by specifying query parameters that match columns in the database. Additionally, users can control the number of results returned using the start and step parameters.
      operationId: listUsersV1
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/ListStartParam"
        - $ref: "#/components/parameters/ListStepParam" 
        - $ref: "#/components/parameters/Filter"
        - $ref: "#/components/parameters/OrderBy" 
      responses:
        '200':
          description: A list of users.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user_list"
              example:
                - id: 1
                  email: john.doe@example.com
                  phc: "somehashvalue"
                  first_name: John
                  last_name: Doe
                  created: "2022-03-21T15:23:57.345Z"
                  role: 1
                  active: 1
                  last_access: "2022-03-21"
                - id: 2
                  email: jane.smith@example.com
                  phc: "someotherhashvalue"
                  first_name: Jane
                  last_name: Smith
                  created: "2022-03-22T10:10:10.000Z"
                  role: 2
                  active: 0
                  last_access: "2022-03-22"
        '204':
          description: 'The search parameters yielded zero results'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/204_error"
        default:
          description: An error has occured.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/server_error"
    post:
      summary: Create a new user.
      description: When valid fieds are passed in the request body, a new user will be created. A 201 will contain the new user id.
      operationId: updateUserV1
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_input"
      responses:
        '201':
          description: The new user has been created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        '400':
          description: The request is invalid or malformed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400_error"  
  /users/{id}:
    get:
      summary: Return a single user entry.
      description: When a valid user id is passed in, a user object is returned.
      operationId: listUserV1
      tags:
        - Users
      responses:
        '200':
          description: A user entry.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payloads:
                    type: array
                    items: {  
                      type: string,
                      $ref: "#/components/schemas/user"
                    }
        '404':
          description: 'No user with that id exists.'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404_error"
    patch:
      summary: Update an existing user.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_input"
      responses:
        '204':
          description: The user has been updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        '304':
          description: Failed to update the user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
    delete:
      summary: Delete a user by ID
      description: Deletes the user identified by the given ID.
      operationId: deleteUser
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          description: The ID of the user to delete
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: User deleted successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/204_error"
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404_error"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500_error"
  /users/{id}/posts:
    get:
      summary: Return specified blogs entries for a user
      description: When a valid user id is passed in, a user object is returned along with the corresponding blog entries.
      operationId: listUserBlogsV1
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          description: ID of the user whose blog posts to retrieve.
          required: true
          schema:
            type: integer
            format: int32
        - $ref: "#/components/parameters/ListStartParam"
        - $ref: "#/components/parameters/ListStepParam" 
        - $ref: "#/components/parameters/Filter"
        - $ref: "#/components/parameters/OrderBy" 
      responses:
        '200':
          description: Blog posts created by the user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/user'
                      blog_posts:
                        type: array
                        items:
                          $ref: '#/components/schemas/post'
                          tags:
                            type: array
                            items:
                              $ref: '#/components/schemas/tag'
              example:
                {
                "payload": {
                  "user": {
                    "id": 123,
                    "name": "John Doe",
                    "email": "johndoe@example.com",
                    "created_at": "2022-01-01T12:00:00Z",
                    "updated_at": "2022-01-01T12:00:00Z"
                  },
                  "blog_posts": [
                    {
                      "id": 1,
                      "title": "My first blog post",
                      "content": "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
                      "created_at": "2022-01-01T12:00:00Z",
                      "updated_at": "2022-01-01T12:00:00Z",
                      "tags": ["tag1", "tag2"]
                    },
                    {
                      "id": 2,
                      "title": "My second blog post",
                      "content": "Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
                      "created_at": "2022-01-02T12:00:00Z",
                      "updated_at": "2022-01-02T12:00:00Z",
                      "tags": ["tag1", "tag2"]
                    }
                  ]
                }
              }
  /posts:
    get:
      summary: Return a list of blog entries.
      description: The API allows users to filter the list of posts by specifying query parameters that match columns in the database. Additionally, users can control the number of results returned using the start and step parameters.
      operationId: listPostV1
      tags:
        - Posts
      parameters:
        - $ref: "#/components/parameters/ListStartParam"
        - $ref: "#/components/parameters/ListStepParam" 
        - $ref: "#/components/parameters/Filter"
        - $ref: "#/components/parameters/OrderBy"
      responses:
        '200':
          description: A list of posts.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/post_list"
    post:
      summary: Create a new post.
      description: When valid fieds are passed in the request body, a new post will be created. A 201 will contain the new post id.
      operationId: updatePostV1
      tags:
        - Posts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/post_input"
      responses:
        '201':
          description: The new post has been created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/post"
        '400':
          description: The request is invalid or malformed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400_error"  
  /posts/{id}:
    get:
      summary: Return a single post.
      description: When a valid post id is passed in, a post object is returned.
      operationId: listPostV1
      tags:
        - Posts
      responses:
        '200':
          description: A post.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payloads:
                    type: array
                    items: {  
                      type: string,
                      $ref: "#/components/schemas/post"
                    }
        '404':
          description: 'No post with that id exists.'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404_error"
    patch:
      summary: Update an existing Post.
      tags:
        - Posts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/post_input"
      responses:
        '204':
          description: The post has been updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/post"
        '304':
          description: Failed to update the post.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/post"
    delete:
      summary: Delete a post by ID
      description: Deletes the post identified by the given ID.
      operationId: deletePost
      tags:
        - Posts
      parameters:
        - name: postId
          in: path
          description: The ID of the post to delete
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Post deleted successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/204_error"
        '404':
          description: Post not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404_error"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500_error"
  /tags:
    get:
      summary: Return a list of post tags.
      description: Use the start and step parameters to get tags.
      operationId: listTagsV1
      tags:
        - Tags      
      parameters:
        - $ref: "#/components/parameters/ListStartParam"
        - $ref: "#/components/parameters/ListStepParam" 
        - $ref: "#/components/parameters/Filter"
        - $ref: "#/components/parameters/OrderBy"              
      responses:
        '200':
          description: A list of post tags.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payloads:
                    type: array
                    items: {  
                      type: array,
                      items: {
                        type: string,
                        $ref: "#/components/schemas/post_tag"
                      }
                    }
        '204':
          description: 'The search parameters yielded zero results'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/204_error"
        default:
          description: An error has occured.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/server_error"
    post:
      summary: Create a new tag.
      description: When valid fieds are passed in the request body, a new tag will be created. A 201 will contain the new tag id.
      operationId: updatePostV1
      tags:
        - Tags
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/post_tag_input"
      responses:
        '201':
          description: The new post has been created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/post_tag"
        '400':
          description: The request is invalid or malformed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400_error"  
  /tags/{tagID}:
    patch:
      summary: Update an existing tag.
      tags:
        - Tags
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/post_tag_input"
      responses:
        '204':
          description: The tag has been updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/post_tag"
        '304':
          description: Failed to update the user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/post_tag"
    delete:
      summary: Delete a tag by ID
      description: Deletes the tag identified by the given ID.
      operationId: deleteTagV1
      tags:
        - Tags
      parameters:
        - name: tagId
          in: path
          description: The ID of the tag to delete
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Tag deleted successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/204_error"
        '404':
          description: Tag not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404_error"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500_error"
                      
components:
  parameters:
    ListStartParam:
      name: start
      in: query
      description: 
        "
        Works in conjunction with the ListStepParam.<br>
        Items returned = (start * step) + step.<br>
        Assume the query orders by item_id ascending.<br>
        For example: You provide a start of 0 and a step of 10. A list of 
        the 'first' ten items will be returned. A start of 2 and a step of 3 would 
        return a list of 3 items returned at the 6th - 8th places.<br>
        Start and Step combinations that query up to and beyond the available entries
        are valid. In such query a 'short' or empty list will be returned.
        "
      schema:
        type: integer
        format: int64
        minimum: 0
        maximum: 100
      required: false
      allowEmptyValue: false
    ListStepParam:
      name: step  
      in: query
      description:         
        "
        See the ListStartParam description.
        "
      schema:
        type: integer
        format: int64
        minimum: 0
      required: false
      allowEmptyValue: false
    TagIdPathParam:
      name: tagID
      in: path
      description:
        Tag ID
      required: true
      schema:
        type: integer
    TagNamePathParam:
      name: tagName
      in: path
      description:
        Tag Name
      required: true
      schema:
        type: string
    Filter:
      name: filter
      in: query
      required: false
      description: 
        "
        Matches on any field in the objects table. For example, in the Users table a column of 'name' exists. 
        You could, effectively, perform a query filter during the lookup of Users on the 'name' field.
        "
      schema:
        type: object
        additionalProperties:
          type: string
      examples:
        example1:
          summary: Sort by creation date in descending order, then by title in ascending order.
          value: "sort=-created_at,name"
    OrderBy:
      name: orderBy
      in: query
      required: false
      description: Sort the results by one or more fields, separated by commas. Use a "-" prefix to sort in descending order.
      schema:
        type: string
  schemas:
    server_error:
      description: An error occured. Some data may be provided below.
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              default: 0
            message:
              type: string
              default: "Could not provide the error message."
    204_error:
      description: The provided query parameter(s) yielded zero results.
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              default: 204
            message:
              type: string
              default: "The URI format was valid but the provided query parameters yielded zero results."
    404_error:
      description: The specified URI does not exist.
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              default: 404
            message:
              type: string
              default: "The specified URI does not exist because the item id was not found."
    400_error:
      description: The server cannot (or will not) perform the client's reqeuested action.
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              default: 404
            message:
              type: string
              default: "Your request body did not contain valid values. Alter your input and try again."
    500_error:
      description: The server encountered an internal error and is not able to process your request.
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              default: 500
            message:
              type: string
              default: "The server had an internal error and could not process your request. Please try again later."
    payload:
      description: A list of query results.
      type: object
      example: "payloads"
      properties:
        payloads:
          type: array
    blog_tag_payload:
      description: A list of 
    post_tag:
      description: A short description of a topic.
      type: object
      example: {"id": 0, "name": "Rust"}
      properties:
        id:
          description: The unique identifier for this object.
          type: integer
          example: 3
          minimum: 0
          maximum: 255
        name:
          description: The description of a topic. Must be unique. First letters of each word will be uppercased. 
          type: integer
          example: 4
          minimum: 0
          maximum: 255
    post_tag_input:
      description: Create a new tag to be attached to posts.
      type: object
      example: {"name": "Rust"}
      properties:
        name:
          description: A Case-insensitive word or short phrase that describes a topic covered in your post.
          type: string
          maxLength: 50
      required:
        - name
    user:
      type: object
      description: User object
      properties:
        id:
          type: integer
          format: int32
        email:
          type: string
          minLength: 0
          maxLength: 50
          format: uuid
        phc:
          type: string
          minLength: 94
          maxLength: 94
        first_name: 
          type: string
          minLength: 0
          maxLength: 25
        last_name:
          type: string
          minLength: 0
          maxLength: 25
        created:
          type: string
          format: date-time
        role:
          type: integer
          format: int32
        active:
          type: integer
          format: int8
        last_access:
          type: string
          format: date
      required:
        - id
        - role
    post:
      type: object
      description: Post object
      properties:
        id:
          type: integer
          format: i32
        title:
          type: string
          minLength: 1
          maxLength: 100
        author:
          type: string
          minLength: 1
          maxLength: 100
        created:
          type: string
          format: date-time
        last_updated:
          type: string
          format: date
        content:
          type: string
        tags:
          type: array
          items:
            $ref: "#/components/schemas/post_tag"
      required:
        - id
        - title
        - author
    user_list:
      type: array
      minItems: 1
      maxItems: 100
      description: List of Users
      items:
        $ref: "#/components/schemas/user"
    post_list:
      type: array
      minItems: 1
      maxItems: 100
      description: List of Posts and their tags
      items:
        $ref: "#/components/schemas/post"
    user_input:
      type: object
      properties:
        email:
          type: string
          maxLength: 50
        first_name:
          type: string
          maxLength: 25
        last_name:
          type: string
          maxLength: 25
        role:
          type: integer
      required:
        - email
        - role
    post_input:
      type: object
      properties:
        title:
          type: string
          maxLength: 50
        content:
          type: string
      required:
        - title
        - author