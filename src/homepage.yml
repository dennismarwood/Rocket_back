openapi: '3.0.1'
# Cors issue in vs code - https://dzhavat.github.io/2020/11/12/easy-way-to-debug-a-webview-in-a-vscode-extension.html
# https://github.com/42Crunch/vscode-openapi/issues/129
info:
  title: DennisMarwood.com
  description: CRUD blog entries for homepage.
  contact:
      name: Dennis Marwood,
      url: https://dennismarwood.com/contact,
      email: dennismarwood@gmail.com
  version: '1.0'
  #license:
    #name: 
    #url:
servers: #Check on passing in a variable here
  - url: http://localhost:8001/api
    description: Dev Back
  - url: http://127.0.0.1:8001/api
    description: Dev Back
paths:
  /users:
    get:
      summary: Return a list of users.
      description: The API allows users to filter the list of users by specifying query parameters that match columns in the database. Additionally, users can control the number of results returned using the start and step parameters.
      operationId: listUsersV1
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/ListStartParam"
        - $ref: "#/components/parameters/ListStepParam" 
        - $ref: "#/components/parameters/Filter"
        - $ref: "#/components/parameters/OrderBy" 
      responses:
        '200':
          description: A list of users.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user_list"
              example:
                - id: 1
                  email: john.doe@example.com
                  phc: "somehashvalue"
                  first_name: John
                  last_name: Doe
                  created: "2022-03-21T15:23:57.345Z"
                  role: 1
                  active: 1
                  last_access: "2022-03-21"
                - id: 2
                  email: jane.smith@example.com
                  phc: "someotherhashvalue"
                  first_name: Jane
                  last_name: Smith
                  created: "2022-03-22T10:10:10.000Z"
                  role: 2
                  active: 0
                  last_access: "2022-03-22"
        '204':
          description: 'The search parameters yielded zero results'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/204_error"
        default:
          description: An error has occured.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/server_error"
  /tags:
    get:
      summary: Return a list of blog tags.
      description: Use the start and step parameters to get tags.
      operationId: listTagsV1
      tags:
        - tags      
      parameters:
        - $ref: "#/components/parameters/ListStartParam"
        - $ref: "#/components/parameters/ListStepParam"              
      responses:
        '200':
          description: A list of tags.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payloads:
                    type: array
                    items: {  
                      type: array,
                      items: {
                        type: string,
                        $ref: "#/components/schemas/blog_tag"
                      }
                    }
        '204':
          description: 'The search parameters yielded zero results'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/204_error"
        default:
          description: An error has occured.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/server_error"
  /tags/{tagID}:
    get:
      summary: Return a tag matching the provided id.
      description: Given an id for a tag return that tag.
      operationId: listTagsV1
      tags:
        - tags
      parameters:
        - $ref: "#/components/parameters/TagIdPathParam"
      responses:
        '200':
          description: 'A single tag name is returned'
          content:
            application/json:
              schema:
                type: object
                properties:
                  payloads:
                    type: array
                    items: {
                        type: string,
                        $ref: "#/components/schemas/blog_tag"
                    }
        '404':
          description: 'No tag with that id exists.'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404_error"
        default:
          description: An error has occured.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/server_error"
    put: 
      responses:
        '200':
          description: '200'
      deprecated: false
  /tags/{tagName}:
    get:
      summary: Return the tag id matching the provided name.
      description: Given a name for a tag return that tag's id.
      operationId: listTagsV1
      tags:
        - tags
      parameters:
        - $ref: "#/components/parameters/TagIdPathParam"
      responses:
        '200':
          description: 'A single tag id is returned'
          content:
            application/json:
              schema:
                type: object
                properties:
                  payloads:
                    type: array
                    items: {
                        type: integer                        
                    }
                    example: [1]
        '404':
          description: 'No tag with that name exists.'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404_error"
        default:
          description: An error has occured.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/server_error"
    put: 
      responses:
        '200':
          description: '200'
      deprecated: false
  /customers:
    get:
      responses:
        '200':
          description: List of Customers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customer_list"
                      
components:
  parameters:
    ListStartParam:
      name: start
      in: query
      description: 
        "
        Works in conjunction with the ListStepParam.<br>
        Items returned = (start * step) + step.<br>
        Assume the query orders by item_id ascending.<br>
        For example: You provide a start of 0 and a step of 10. A list of 
        the 'first' ten items will be returned. A start of 2 and a step of 3 would 
        return a list of 3 items returned at the 6th - 8th places.<br>
        Start and Step combinations that query up to and beyond the available entries
        are valid. In such query a 'short' or empty list will be returned.
        "
      schema:
        type: integer
        format: int64
        minimum: 0
        maximum: 100
      required: false
      allowEmptyValue: false
    ListStepParam:
      name: step  
      in: query
      description:         
        "
        See the ListStartParam description.
        "
      schema:
        type: integer
        format: int64
        minimum: 0
      required: false
      allowEmptyValue: false
    TagIdPathParam:
      name: tagID
      in: path
      description:
        Tag ID
      required: true
      schema:
        type: integer
    TagNamePathParam:
      name: tagName
      in: path
      description:
        Tag Name
      required: true
      schema:
        type: string
    Filter:
      name: filter
      in: query
      required: false
      description: 
        "
        Matches on any field in the objects table. For example, in the Users table a column of 'name' exists. 
        You could, effectively, perform a query filter during the lookup of Users on the 'name' field.
        "
      schema:
        type: object
        additionalProperties:
          type: string
      examples:
        example1:
          summary: Sort by creation date in descending order, then by title in ascending order.
          value: "sort=-created_at,name"
    OrderBy:
      name: orderBy
      in: query
      required: false
      description: Sort the results by one or more fields, separated by commas. Use a "-" prefix to sort in descending order.
      schema:
        type: string
  schemas:
    server_error:
      description: An error occured. Some data may be provided below.
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              default: 0
            message:
              type: string
              default: "Could not provide the error message."
    204_error:
      description: The provided query parameter(s) yielded zero results.
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              default: 204
            message:
              type: string
              default: "The URI format was valid but the provided query parameters yielded zero results."
    404_error:
      description: The specified URI does not exist.
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              default: 404
            message:
              type: string
              default: "The specified URI does not exist because the item id was not found."
    payload:
      description: A list of query results.
      type: object
      example: "payloads"
      properties:
        payloads:
          type: array
    blog_tag_payload:
      description: A list of 
    blog_tag:
      description: A short description of a topic.
      type: object
      example: {"id": 0, "name": "Rust"}
      properties:
        id:
          description: The unique identifier for this object.
          type: integer
          example: 3
          minimum: 0
          maximum: 255
        name:
          description: The description of a topic. Must be unique. First letters of each word will be uppercased. 
          type: integer
          example: 4
          minimum: 0
          maximum: 255
    address:
      type: object
      properties:
        line1:
          type: string
          example: 123 Main St
        city:
          type: string
          example: Home Town
        zipcode:
          type: string
          example: '12345'
        state:
          type: string
          minLength: 2
          maxLength: 2
          description: 2 letter state code
          # enum: [AL, AK, CA]
          enum:
            - AL
            - AK
            - AZ
            - AR
            - CA
    customer:                  
      type: object
      description: Customer object
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
          minLength: 2
          maxLength: 100
          example: John
        lastName:
          type: string
          minLength: 2
          maxLength: 100
          example: Smith
        address:
          $ref: "#/components/schemas/address"
    user:
      type: object
      description: User object
      properties:
        id:
          type: integer
          format: int32
        email:
          type: string
          minLength: 0
          maxLength: 50
          format: uuid
        phc:
          type: string
          minLength: 94
          maxLength: 94
        first_name: 
          type: string
          minLength: 0
          maxLength: 25
        last_name:
          type: string
          minLength: 0
          maxLength: 25
        created:
          type: string
          format: date-time
        role:
          type: integer
          format: int32
        active:
          type: integer
          format: int8
        last_access:
          type: string
          format: date
      required:
        - id
        - role
    customer_list:
      type: array
      minItems: 1
      maxItems: 100
      description: List of Customers
      items:
        $ref: "#/components/schemas/customer"
    user_list:
      type: array
      minItems: 1
      maxItems: 100
      description: List of Users
      items:
        $ref: "#/components/schemas/user"