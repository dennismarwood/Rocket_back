openapi: '3.0.1'
# Cors issue in vs code - https://dzhavat.github.io/2020/11/12/easy-way-to-debug-a-webview-in-a-vscode-extension.html
# https://github.com/42Crunch/vscode-openapi/issues/129
info:
  title: DennisMarwood.com
  description: CRUD post entries for homepage blog.
  contact:
      name: Dennis Marwood,
      url: https://dennismarwood.com/contact,
      email: dennismarwood@gmail.com
  version: '1.0'
  #license:
    #name: 
    #url:
servers:
  - url: http://localhost:8001/api
    description: Dev Back V1
  - url: http://127.0.0.1:8001/api
    description: Dev Back V1
paths:
  /users:
    get:
      summary: Return a list of users.
      description: The API allows users to filter the list of users by specifying query parameters that match columns in the database. Additionally, users can control the number of results returned using the start and step parameters.
      operationId: listUsersV1
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/ListStartParam"
        - $ref: "#/components/parameters/ListStepParam" 
        #- $ref: "#/components/parameters/Filter"
        - $ref: "#/components/parameters/OrderBy" 
      responses:
        '200':
          description: A list of users.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/users"
              example:
                - id: 1
                  email: john.doe@example.com
                  phc: "somehashvalue"
                  first_name: John
                  last_name: Doe
                  created: "2022-03-21T15:23:57.345Z"
                  role: 1
                  active: 1
                  last_access: "2022-03-21"
                - id: 2
                  email: jane.smith@example.com
                  phc: "someotherhashvalue"
                  first_name: Jane
                  last_name: Smith
                  created: "2022-03-22T10:10:10.000Z"
                  role: 2
                  active: 0
                  last_access: "2022-03-22"
        default:
          description: An error has occured.
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: "#/components/schemas/error"
    post:
      summary: Create a new user.
      description: When valid fieds are passed in the request body, a new user will be created. A 201 will contain the new user id.
      operationId: updateUserV1
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_input"
      responses:
        '201':
          description: The new user has been created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        '400':
          description: The request is invalid or malformed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400_error"  
  /users/{id}:
    get:
      summary: Return a single user entry.
      description: When a valid user id is passed in, a user object is returned.
      operationId: listUserV1
      tags:
        - Users
      responses:
        '200':
          description: A user entry.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payloads:
                    type: array
                    items: {  
                      type: string,
                      $ref: "#/components/schemas/user"
                    }
    patch:
      summary: Update an existing user.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_input"
      responses:
        '304':
          description: Failed to update the user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
    delete:
      summary: Delete a user by ID
      description: Deletes the user identified by the given ID.
      operationId: deleteUser
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          description: The ID of the user to delete
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500_error"
  /users/{id}/posts:
    get:
      summary: Return specified blogs entries for a user
      description: When a valid user id is passed in, a user object is returned along with the corresponding blog entries.
      operationId: listUserBlogsV1
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          description: ID of the user whose blog posts to retrieve.
          required: true
          schema:
            type: integer
            format: int32
        - $ref: "#/components/parameters/ListStartParam"
        - $ref: "#/components/parameters/ListStepParam" 
        #- $ref: "#/components/parameters/Filter"
        - $ref: "#/components/parameters/OrderBy" 
      responses:
        '200':
          description: Blog posts created by the user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/user'
                      blog_posts:
                        type: array
                        items:
                          $ref: '#/components/schemas/post'
                          tags:
                            type: array
                            items:
                              $ref: '#/components/schemas/tag'
              example:
                {
                "payload": {
                  "user": {
                    "id": 123,
                    "name": "John Doe",
                    "email": "johndoe@example.com",
                    "created_at": "2022-01-01T12:00:00Z",
                    "updated_at": "2022-01-01T12:00:00Z"
                  },
                  "blog_posts": [
                    {
                      "id": 1,
                      "title": "My first blog post",
                      "content": "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
                      "created_at": "2022-01-01T12:00:00Z",
                      "updated_at": "2022-01-01T12:00:00Z",
                      "tags": ["tag1", "tag2"]
                    },
                    {
                      "id": 2,
                      "title": "My second blog post",
                      "content": "Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
                      "created_at": "2022-01-02T12:00:00Z",
                      "updated_at": "2022-01-02T12:00:00Z",
                      "tags": ["tag1", "tag2"]
                    }
                  ]
                }
              }
  /posts:
    get:
      summary: Return a list of blog posts.
      description: The API allows users to filter the type and quantity of posts by specifying query parameters that match columns in the database.
      operationId: GetPostsV1
      tags:
        - Posts
      parameters:
        - $ref: "#/components/parameters/ListStartParam"
        - $ref: "#/components/parameters/ListStepParam" 
        - $ref: "#/components/parameters/Filter.eq"
        - $ref: "#/components/parameters/Filter.le"
        - $ref: "#/components/parameters/Filter.ge"
        - $ref: "#/components/parameters/Filter.like"
        - $ref: "#/components/parameters/Filter.between"
        - $ref: "#/components/parameters/OrderBy"
      responses:
        '200':
          description: A list of posts.
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/success"
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: "#/components/schemas/post_with_tags"
        default:
          description: An error has occured.
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: "#/components/schemas/error"
    post:
      summary: Create a new post.
      description: When valid fieds are passed in the request body, a new post will be created. A 201 will contain the new post id. The session jwt will be used to determine the author automatically.
      operationId: updatePostV1
      tags:
        - Posts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/post_input"
      responses:
        '201':
          description: The new post has been created.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/success_201"
                  - type: object
        default:
          description: An error has occured.
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: "#/components/schemas/error" 
  /posts/{id}:
    get:
      summary: Return a single post.
      description: When a valid post id is passed in, a post object is returned.
      operationId: GetPostV1
      tags:
        - Posts
      responses:
        '200':
          description: A post.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/success"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/post_with_tags"
        default:
          description: An error has occured.
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: "#/components/schemas/error"
    patch:
      summary: Update an existing Post.
      description: Title and content of the post can be altered.
      operationId: PatchPostV1
      tags:
        - Posts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/post_input"
      responses:
        '204':
          description: The post has been updated. No further response.
        default:
          description: An error has occured.
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: "#/components/schemas/error"
    delete:
      summary: Delete a post by ID
      description: Deletes the post identified by the given ID.
      operationId: DeletePostV1
      tags:
        - Posts
      parameters:
        - name: postId
          in: path
          description: The ID of the post to delete
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: The post has been deleted. No further response.
        default:
          description: An error has occured.
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: "#/components/schemas/error"
  /posts/{id}/tags:
    patch:
      summary: Add tags to a post.
      description: Use either query params or pass along a form to add tags to a post. Note the **Request Body** drop down below.
      operationId: PatchPostTagsV1
      tags:
        - Posts
      parameters:
        - $ref: "#/components/parameters/ListStartParam"
        - $ref: "#/components/parameters/ListStepParam" 
        - $ref: "#/components/parameters/Filter.eq"
        - $ref: "#/components/parameters/Filter.le"
        - $ref: "#/components/parameters/Filter.ge"
        - $ref: "#/components/parameters/Filter.like"
        - $ref: "#/components/parameters/Filter.between"
        - $ref: "#/components/parameters/OrderBy"
      requestBody:
        required: false
        content:
          application/x-www-form-urlencoded: {}
          application/json:
            schema:
              $ref: "#/components/schemas/bulk_tags"
      responses:
        '204':
          description: The post has been updated. No further response.
        default:
          description: An error has occured.
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: "#/components/schemas/error"
    put:
      summary: Replace all tags on a post.
      description: The body should contain some combination of "names" and "ids" for tags. All existing tags are replaced. An empty set will render the post tagless.
      operationId: PutPostTagsV1
      tags:
        - Posts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/bulk_tags"
      responses:
        '204':
          description: The post has been updated. No further response.
        default:
          description: An error has occured.
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: "#/components/schemas/error"
  /posts/{id}/tags/{id}:
    put:
      summary: Add a tag to a post.
      description: Invalid tag id will return 404, invalid tag id will return 204.
      operationId: PutPostTagV1
      tags:
        - Posts
      parameters:
        - name: postId
          in: path
          description: The ID of the post in reference.
          required: true
          schema:
            type: integer
            format: int32
        - name: tagId
          in: path
          description: The ID of the tag to append to the post.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: The post has been updated. No further response.
        default:
          description: An error has occured.
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: "#/components/schemas/error"
    delete:
      summary: Delete a tag from a post.
      description: Deletes the tag identified by the given ID.
      operationId: DeletePostTagV1
      tags:
        - Posts
      parameters:
        - name: postId
          in: path
          description: The ID in reference.
          required: true
          schema:
            type: integer
            format: int32
        - name: tagId
          in: path
          description: The ID of the tag to removed from the post.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: The post has been deleted. No further response.
        default:
          description: An error has occured.
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: "#/components/schemas/error"
  /tags:
    get:
      summary: Return a list of post tags.
      description: Use the start and step parameters to get tags.
      operationId: GetTagsV1
      tags:
        - Tags
      parameters:
        - $ref: "#/components/parameters/ListStartParam"
        - $ref: "#/components/parameters/ListStepParam" 
        - $ref: "#/components/parameters/Filter.eq"
        - $ref: "#/components/parameters/Filter.le"
        - $ref: "#/components/parameters/Filter.ge"
        - $ref: "#/components/parameters/Filter.like"
        - $ref: "#/components/parameters/Filter.between"
        - $ref: "#/components/parameters/OrderBy"       
      responses:
        '200':
          description: A list of post tags. 
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/success"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/tags"
        default:
          description: An error has occured.
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: "#/components/schemas/error"
    post:
      summary: Create a new tag.
      description: When valid fieds are passed in the request body, a new tag will be created. A 201 will contain the new tag id.
      operationId: PostTagV1
      tags:
        - Tags
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tag_input"
      responses:
        '201':
          description: A new tag was created. This respone will contain a link to the new tag. 
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/success_201"
                  - type: object
        default:
          description: An error has occured.
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: "#/components/schemas/error"
  /tags/{tagID}:
    get:
      summary: Retrieve an existing tag by its id.
      description: A valid id returns a single tag.
      operationId: GetTagV1
      tags:
        - Tags
      responses:
        '200':
          description: A single tag.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/success"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/tags"
        default:
          description: An error has occured.
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: "#/components/schemas/error"
    patch:
      summary: Update an existing tag by id.
      description: The name field can be altered.
      operationId: PatchTagV1
      tags:
        - Tags
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tag_input"
      responses:
        '204':
          description: Updated tag. No further response.
        default:
          description: An error has occured.
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: "#/components/schemas/error"
    delete:
      summary: Delete a tag by ID
      description: Deletes the tag identified by the given ID. Deleted tags are also removed from posts.
      operationId: DeleteTagV1
      tags:
        - Tags
      parameters:
        - name: tagId
          in: path
          description: The ID of the tag to delete
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Tag deleted successfully. Included in the body will be the number of posts that were using the tag.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/success"
                  - type: object
                    properties:
                      Affected posts:
                        type: integer
                        default: 3
        default:
          description: An error has occured.
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: "#/components/schemas/error"    
  /tags/{tagID}/posts:
    get:
      summary: Retrieve all the posts that are using the specified tag.
      description: A valid id will return a set of posts using the tag. Invalid ids will 404.
      operationId: PostsWithTagsV1
      tags:
        - Tags
      responses:
        '200':
          description: A collection of posts using the tag.
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/success"
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: "#/components/schemas/post_with_tags"
        default:
          description: An error has occured.
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: "#/components/schemas/error"
components:
  parameters:
    ListStartParam:
      name: start
      in: query
      description: 
        "
        A starting index or page. Works in tandem with the step parameter.<br>
        Example: start=2&step=10<br>
        This would retrieve items 20 through 30.<br>
        Calculation: (2 * 10) through ((2 * 10) + 10)
        "
      schema:
        type: integer
        format: int64
        minimum: 0
        maximum: 100
      required: false
      allowEmptyValue: false
    ListStepParam:
      name: step  
      in: query
      description:         
        "
        See the *start* description.
        "
      schema:
        type: integer
        format: int64
        minimum: 0
      required: false
      allowEmptyValue: false
    TagIdPathParam:
      name: tagID
      in: path
      description:
        Tag ID
      required: true
      schema:
        type: integer
    TagNamePathParam:
      name: tagName
      in: path
      description:
        Tag Name
      required: true
      schema:
        type: string
    Filter.eq:
      name: filter.eq
      in: query
      required: false
      description: 
        "
        Synonymous with an SQL \"Equal\" operator provided to a \"Where\" clause. Multiple uses is synonymous with the SQL \"In\" operator. \
        Pertintent to nearly all columns relating to the search subject. Inapplicable (or invalid) columns are simply ignored.
        "
      schema:
        type: array
        items:
          type: string
      style: form
      explode: true
      example: "id=10"
    Filter.ge:
      name: filter.ge
      in: query
      required: false
      description: 
        "
        Synonymous with an SQL \"Greater Than or Equal To\" operator provided to a \"Where\" clause. Multiple uses are cumulative, passing all operations to db. \
        Pertintent to nearly all columns relating to the search subject. Inapplicable (or invalid) columns are simply ignored.
        "
      schema:
        type: array
        items:
          type: string
      example: "id=10"
    Filter.le:
      name: filter.le
      in: query
      required: false
      description: 
        "
        Synonymous with an SQL \"Less Than or Equal To\" operator provided to a \"Where\" clause. Multiple uses are cumulative, passing all operations to db. \
        Pertintent to nearly all columns relating to the search subject. Inapplicable (or invalid) columns are simply ignored.
        "
      schema:
        type: array
        items:
          type: string
      example: "id=10"
    Filter.like:
      name: filter.like
      in: query
      required: false
      description: 
        "
        Synonymous with an SQL \"Like\" operator provided to a \"Where\" clause. Multiple uses are cumulative, passing all operations to db. \
        Pertintent to nearly all columns relating to the search subject. Inapplicable (or invalid) columns are simply ignored. Include \"%\" \
        as a wildcard.
        "
      schema:
        type: array
        items:
          type: string
      example: "tag_name=%ello Worl%"
    Filter.between:
      name: filter.between
      in: query
      required: false
      description: 
        "
        Synonymous with an SQL \"Between\" operator provided to a \"Where\" clause. Multiple uses is synonymous with the SQL \"In\" operator. \
        Pertintent to nearly all columns relating to the search subject. Inapplicable (or invalid) columns are simply ignored.
        "
      schema:
        type: array
        items:
          type: string
      examples: 
        digits: 
          value: "id=10,20"
          summary: "id=10,20"
        dates:
          value: "created=01-01-2023,02-02-2023"
          summary: "created=01-01-2023,02-02-2023"
    OrderBy:
      name: orderBy
      in: query
      required: false
      description: 
        "
        Synonymous with an SQL \"Order by\" keyword. Multiple columns can be sorted. Prepending a \"-\" is synonymous with the \"DESC\" keyword. \
        Pertintent to nearly all columns relating to the search subject. Inapplicable (or invalid) columns are simply ignored.
        "
      schema:
        type: array
        items:
          type: string
      style: form
      explode: true
      example: "-id"
  schemas:
    success:
      description: A 200 series responses
      type: object
      properties:
        status:
          type: string
          default: "Success"
    success_201:
      description: A 201
      type: object
      properties:
        status:
          type: string
          default: "Success"
        message:
          type: string
          default: "Resource created successfully."
        location:
          type: string
          format: URI
          default: "https://dennismarwood.com/{object}/{new_id}"
          description: "A URI to the newly created resource"
    error:
      description: Any non 200 series response.
      type: object
      properties:
        status:
          type: string
          default: "Error"
        code:
          type: string
          default: "SOME_ERROR"
        message:
          type: string
          default: "Data"
        errors:
          type: array
          default: "If applicable, element specific troubleshooting messages will appear here."
    400_error:
      description: The server cannot (or will not) perform the client's reqeuested action.
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              default: 400
            message:
              type: string
              default: "Your request body did not contain valid values. Alter your input and try again."
    500_error:
      description: The server encountered an internal error and is not able to process your request.
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              default: 500
            message:
              type: string
              default: "The server had an internal error and could not process your request. Please try again later."
    bulk_tags:
      description: A collection of optional tag ids and optional tag names.
      type: object
      example: {"id": [0, 1, 2], "name": ["Rust", "Programming", "Learning"]}
      properties:
        id:
          description: An array of tag ids. 
          type: array
          items:
            type: integer
          example: [3, 4, 5]
        name:
          description: An array of tag names
          type: array
          items:
            type: string
          example: ["Rust", "Learning"]
    tag:
      description: A short description of a topic.
      type: object
      example: {"id": 0, "name": "Rust"}
      properties:
        id:
          description: The unique identifier for this object.
          type: integer
          example: 3
          minimum: 0
          maximum: 255
        name:
          description: The description of a topic. Must be unique. First letters of each word will be uppercased. 
          type: integer
          example: 4
          minimum: 0
          maximum: 255
    tags:
      type: array
      items:
        $ref: '#/components/schemas/tag'
    tag_input:
      description: Create a new tag to be attached to posts.
      type: object
      example: {"name": "Rust"}
      properties:
        name:
          description: A Case-insensitive word or short phrase that describes a topic covered in your post.
          type: string
          maxLength: 100
      required:
        - name
    post:
      type: object
      description: Post object
      properties:
        id:
          type: integer
          format: i32
        title:
          type: string
          minLength: 1
          maxLength: 100
        author:
          type: string
          minLength: 1
          maxLength: 100
        created:
          type: string
          format: date-time
        last_updated:
          type: string
          format: date
        content:
          type: string
      required:
        - id
        - title
        - author
    posts:
      type: array
      items:
        $ref: '#/components/schemas/post'
    post_with_tags:
      type: object
      properties:
        post:
          $ref: "#/components/schemas/post"
        tags:
          $ref: "#/components/schemas/tags"
    post_input:
      type: object
      properties:
        title:
          type: string
          maxLength: 50
        content:
          type: string
      required:
        - title
        - author
    user:
      type: object
      description: User object
      properties:
        id:
          type: integer
          format: int32
        email:
          type: string
          minLength: 0
          maxLength: 50
          format: uuid
        phc:
          type: string
          minLength: 94
          maxLength: 94
        first_name: 
          type: string
          minLength: 0
          maxLength: 25
        last_name:
          type: string
          minLength: 0
          maxLength: 25
        created:
          type: string
          format: date-time
        role:
          type: integer
          format: int32
        active:
          type: integer
          format: int8
        last_access:
          type: string
          format: date
      required:
        - id
        - role
    users:
      type: array
      minItems: 1
      maxItems: 100
      description: List of Users
      items:
        $ref: "#/components/schemas/user"
    user_input:
      type: object
      properties:
        email:
          type: string
          maxLength: 50
        first_name:
          type: string
          maxLength: 25
        last_name:
          type: string
          maxLength: 25
        role:
          type: integer
      required:
        - email
        - role